继承的6种方式
1.原型链
  概念：让原型对象等于另一个类型的实例
  它的问题：a.所有实例共享原型里的"引用类型"的值（因为
                引用类型的值在堆区，而原型把值复制给实例时，给它们的是指向该堆区的指针）
             因此当引用类型的值改变所有实例都受到影响
           b.在创建子类型的实例时，不能向父类型的构造函数中传递参数

-------------------------------------------------------------------------------------

2.借用构造函数（也叫伪造对象或经典继承）
  概念：在子类型构造函数的内部调用父类型构造函数(Dad.call(this))。
  它的问题： a.方法都在构造函数中定 义，同样的函数每个实例都要new一份
             b.这种情况，在父类型的原型中定义的方法，对子类型而言也是不可见的

-------------------------------------------------------------------------------------

3.组合继承（组合1和2，也叫伪经典继承）
  概念：使用原型链实现对 原型变量的 “值” 和 “方法” 的继承，而通过借用构造函数来实现对 “变量” 的继承。
  它的问题：调用了两次父类构造函数，一次是在子类型原型赋值的时候，另一次是 在子类型构造函数内部
            这样将导致 子类的原型 和 子类内部 都有一份相同的、父类的变量，降低了效率。

-------------------------------------------------------------------------------------  
4.原型式继承
概念：封装一个函数，函数参数为 想要的原型oo，函数返回一个原型为oo的实例。
步骤：
4.1. 定义一个函数AA，AA函数内部创建一个临时的，prototype是“我想要的原型对象oo”的构函数tt，AA的返回值为new tt();
4.2 定义一个“我想要的原型对象obj”，调用AA并把obj作为参数传给AA，返回值就是原型为obj的实例。.
 代码如下：
        function AA(oo){     
            function tt(){}     
            tt.prototype = oo;     
            return new tt(); 
        } 
        var obj = { name: "Nicholas"  }; //想要的原型
        var aa1 = AA(obj);               //原型为obj的实例

-------------------------------------------------------------------------------------    

5.寄生式继承
  概念：封装两个函数，第一个函数同4-原型式继承；
       第二个函数调用第一个函数，得到原型为传入参数的实例，然后给实例添加方法/属性，然后返回最终实例。
  步骤：
  5. 1  定义一个函数AA，AA函数内部创建一个临时的，prototype是“我想要的原型对象oo”的构函数tt，AA的返回值为new tt();
  5.2   把“用AA构造出一个aa1，并给aa1增加方法 ”封装进一个函数FF里，返回aa1
  5.3   同4.2
  代码如下：
    function AA(oo){     
        function tt(){}     
        tt.prototype = oo;     
        return new tt(); 
    } 
    
    function FF(obj){     
        var aa1 = AA(obj);           //通过调用函数创建一个新对象     
        aa1.sayHi = function(){      //以某种方式来增强这个对象         
            alert("hi");     
        };     
        return aa1;            //返回这个对象 
    } 
 
    var OBJ = { name: "Nicholas" };  //想要的原型
 
    var ff1 = FF(OBJ);  //原型为OBJ的实例
    ff1.sayHi();        //"hi" 
  
  它的问题：不能做到函数复用而降低效率；这一点与借用构造函数模式类似

-------------------------------------------------------------------------------------
                    ★★★★最理想的继承范式★★★★
6.寄生组合继承
  概念：
  6.1 定义一个函数AA，AA函数内部创建一个临时的，prototype是“我想要的原型对象oo”的构函数tt，AA的返回值为new tt();
  6.2 定义一个继承功能函数，传入想继承父子关系的两个构造函数，
  代码如下：
    function AA(oo){     
        function tt(){}     
        tt.prototype = oo;     
        return new tt(); 
    } 

    function JiCheng(son, dad){     
        var prototype = AA(dad.prototype);     //创建对象（此处的ptototype变量就是dad的实例）     
        prototype.constructor = son;           //增强对象（把dad的实例的constructor指针指向son）     
        son.prototype = prototype;             //指定对象 （子构造函数的原型 = 父的实例，完成继承关系）
      } 
 
    function Dad(name){     
        this.name = name;     
        this.colors = ["red", "blue", "green"]; 
    } 
 
    Dad.prototype.sayName = function(){     
      alert(this.name); 
    }; 
 
    function Son(name, age){       
        Dad.call(this, name);    //★★此处得到Dad的属性(它不是new，它只是在this，即son1的作用域内执行Dad内的代码，复制Dad函数内的属性)     
        this.age = age; 
    } 
     
    JiCheng(Son, Dad); 
     
    Son.prototype.sayAge = function(){     
      alert(this.age); 
    }; 

    son1 = new Son("Jack",20);
    son1.sayAge();
    son1.sayName();
 

